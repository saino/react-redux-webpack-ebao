import numeral from 'numeral';
import moment from 'moment';

//Format the passed string replacing the numbered placeholders
//i.e. I'd like some {0} and {1}, or just {0}
//Use example:
//  strings.formatString(strings.question, strings.bread, strings.butter)
export function formatString(str, ...values){
  if (!str) {
    return '';
  }
  var res = str;
  for (let i=0; i<values.length;i++){
    res = _replaceAll("{"+i+"}", values[i], res);
  }
  return res;
}

//Replace all occorrencies of a string in another using RegExp
function _replaceAll(find, replace, str) {
  //Escape find
  find = find.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  return str.replace(new RegExp(find, 'g'), replace);
}

export function formatNumber(number, format = '0,0[.][00]') {
  return numeral(number).format(format);
}

export function formatDate(date, format = 'YYYY-MM-DD') {
  return moment(date).format(format);
}

export function toDate(str) {
  if (!str) {
    return new Date();
  }
  return new Date(str);
}

//身份证校验是否合法
export function IdentityCodeValid(code) {
  var city={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江 ",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北 ",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏 ",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外 "};
  var tip = "身份证号合法";
  var pass= true;
  if(!code || !/(^\d{6}(\d{2})?\d{2}(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d{3}(\d|X|x)$)/i.test(code)){
    tip = "身份证号格式错误";
    pass = false;
  }
  else if(!city[code.substr(0,2)]){
    tip = "地址编码错误";
    pass = false;
  }
  else{
    //18位身份证需要验证最后一位校验位
    if(code.length == 18){
      code = code.split('');
      //∑(ai×Wi)(mod 11)
      //加权因子
      var factor = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ];
      //校验位
      var parity = [ 1, 0, 'X', 9, 8, 7, 6, 5, 4, 3, 2 ];
      var sum = 0;
      var ai = 0;
      var wi = 0;
      for (var i = 0; i < 17; i++)
      {
        ai = code[i];
        wi = factor[i];
        sum += ai * wi;
      }
      var last = parity[sum % 11];
      if(parity[sum % 11] != code[17]){
        tip = "校验位错误";
        pass =false;
      }
    }
  }
  // if(!pass) console.log(tip);
  return pass;
}

//通过身份证号获取年龄
export function getAge(str){
  var data = getBirth(str);
  if(data){
    var   r   =   str.match(/^(\d{1,4})(-|\/)(\d{1,2})\2(\d{1,2})$/);
    if(r==null)return   false;
    var   d=   new   Date(r[1],   r[3]-1,   r[4]);
    if   (d.getFullYear()==r[1]&&(d.getMonth()+1)==r[3]&&d.getDate()==r[4])
    {
      var   Y   =   new   Date().getFullYear();
      return((Y-r[1]));     //年龄
    }
  }else{
    return false; // 出生年月不合法
  }
}

//通过身份证号获取生了多少天
export function getProposalDay(str){
  var data = getBirth(str);
  if(data){
      var today = new Date();
      var time1 = today.getTime();
      var birthday = new Date(data);
      var time2 = birthday.getTime();
      var day = (time1 - time2)/1000/3600/24;
      return day;
  }else{
    return false;
  }
}

//通过身份证号获取生日
export function getBirth(str){
  if(!IdentityCodeValid(str)) return false;  //身份证号码不正确
  if(str.length == 18){
    var birth = str.substr(6,4)+"-"+str.substr(10,2)+"-"+str.substr(12,2);
    return birth;
  }else{
    var birth = str.substr(6,2)+"-"+str.substr(8,2)+"-"+str.substr(10,2);
    return birth;
  }
}

//通过身份证号获取性别
export function getGender(str){
  if(!IdentityCodeValid(str)) return false;  //身份证号码不正确
  var GenderCode = str.length == 18 ? str[16] : str[14];
  if(GenderCode%2){
    return "m"; //男性
  }else{
    return "f"; //女性
  }
}
